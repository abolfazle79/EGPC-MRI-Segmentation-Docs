"use strict";(self.webpackChunkgiza_mri=self.webpackChunkgiza_mri||[]).push([[207],{6326:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"code-reference/code-overview","title":"Code Overview","description":"This section provides a technical breakdown of the final.py script, bridging the gap between the concepts discussed previously and their actual implementation. This overview serves as a high-level map of the code architecture before we dive into each function in detail.","source":"@site/docs/4-code-reference/1-code-overview.md","sourceDirName":"4-code-reference","slug":"/code-reference/code-overview","permalink":"/EGPC-MRI-Segmentation-Docs/docs/code-reference/code-overview","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/4-code-reference/1-code-overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Code Overview"},"sidebar":"tutorialSidebar","previous":{"title":"Code Reference","permalink":"/EGPC-MRI-Segmentation-Docs/docs/category/code-reference"},"next":{"title":"Function: preprocess_mri_image","permalink":"/EGPC-MRI-Segmentation-Docs/docs/code-reference/function-preprocess"}}');var r=i(4848),s=i(8453);const o={sidebar_position:1,title:"Code Overview"},c="Code Structure Overview",a={},d=[{value:"The Execution Pipeline",id:"the-execution-pipeline",level:2},{value:"Key Functions Breakdown",id:"key-functions-breakdown",level:2},{value:"Part 1: <code>Structure</code> Helper Class",id:"part-1-structure-helper-class",level:3},{value:"Part 2: <code>preprocess_mri_image()</code>",id:"part-2-preprocess_mri_image",level:3},{value:"Part 3: <code>run_gpc_for_mri_segmentation()</code>",id:"part-3-run_gpc_for_mri_segmentation",level:3},{value:"Part 4: <code>postprocess_tumor_segmentation()</code>",id:"part-4-postprocess_tumor_segmentation",level:3},{value:"Part 5: Visualization and Saving Functions",id:"part-5-visualization-and-saving-functions",level:3},{value:"Part 6: Main Execution Block",id:"part-6-main-execution-block",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"code-structure-overview",children:"Code Structure Overview"})}),"\n",(0,r.jsx)(n.admonition,{title:"From Theory to Practice",type:"note",children:(0,r.jsxs)(n.p,{children:["This section provides a technical breakdown of the ",(0,r.jsx)(n.code,{children:"final.py"})," script, bridging the gap between the ",(0,r.jsx)(n.a,{href:"/EGPC-MRI-Segmentation-Docs/docs/concepts-and-theory/base-gpc-algorithm",children:"concepts discussed previously"})," and their actual implementation. This overview serves as a high-level map of the code architecture before we dive into each function in detail."]})}),"\n",(0,r.jsxs)(n.p,{children:["The entire process is orchestrated from the ",(0,r.jsx)(n.code,{children:'if __name__ == "__main__"'})," block at the end of the script, which executes a modular pipeline."]}),"\n",(0,r.jsx)(n.h2,{id:"the-execution-pipeline",children:"The Execution Pipeline"}),"\n",(0,r.jsx)(n.p,{children:"The script follows a clear, sequential pipeline:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration:"})," The ",(0,r.jsx)(n.code,{children:"main"})," block starts by setting up configurations, including file paths, the ",(0,r.jsx)(n.code,{children:"RANDOM_SEED"})," for reproducibility, and GPC parameters. It also handles user input for key parameters."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Preprocessing:"})," It calls the ",(0,r.jsx)(n.code,{children:"preprocess_mri_image()"})," function to load the raw MRI scan, clean it, remove artifacts, and generate a precise brain mask."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optimization Core:"})," The cleaned data (",(0,r.jsx)(n.code,{children:"brain_pixels"}),") is then passed to the ",(0,r.jsx)(n.code,{children:"run_gpc_for_mri_segmentation()"})," function to find the optimal cluster centroids."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Refinement:"})," The raw segmentation labels are passed to the ",(0,r.jsx)(n.code,{children:"postprocess_tumor_segmentation()"})," function, which uses intelligent filters to clean the result."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Visualization & Saving:"})," Finally, ",(0,r.jsx)(n.code,{children:"visualize_results()"})," and ",(0,r.jsx)(n.code,{children:"save_tumor_mask()"})," are called to display and save the outputs."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-functions-breakdown",children:"Key Functions Breakdown"}),"\n",(0,r.jsx)(n.p,{children:"The script is organized into several distinct parts, each responsible for a specific stage of the pipeline."}),"\n",(0,r.jsxs)(n.h3,{id:"part-1-structure-helper-class",children:["Part 1: ",(0,r.jsx)(n.code,{children:"Structure"})," Helper Class"]}),"\n",(0,r.jsx)(n.p,{children:"A small utility class that allows for cleaner, attribute-style access to dictionary keys, making the code more readable."}),"\n",(0,r.jsxs)(n.h3,{id:"part-2-preprocess_mri_image",children:["Part 2: ",(0,r.jsx)(n.code,{children:"preprocess_mri_image()"})]}),"\n",(0,r.jsxs)(n.p,{children:["This is one of the most critical functions, responsible for preparing the raw image for segmentation. Its goal is to produce a clean ",(0,r.jsx)(n.code,{children:"brain_mask"})," and a noise-free image array."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/EGPC-MRI-Segmentation-Docs/docs/code-reference/function-preprocess",children:"See the detailed breakdown of this function..."})}),"\n",(0,r.jsxs)(n.h3,{id:"part-3-run_gpc_for_mri_segmentation",children:["Part 3: ",(0,r.jsx)(n.code,{children:"run_gpc_for_mri_segmentation()"})]}),"\n",(0,r.jsxs)(n.p,{children:["This function contains the core logic of our ",(0,r.jsx)(n.strong,{children:"Enhanced GPC (EGPC)"})," algorithm, including smart initialization, adaptive operators, and stagnation-aware escape mechanisms."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/EGPC-MRI-Segmentation-Docs/docs/code-reference/function-gpc-segmentation",children:"See the detailed breakdown of this function..."})}),"\n",(0,r.jsxs)(n.h3,{id:"part-4-postprocess_tumor_segmentation",children:["Part 4: ",(0,r.jsx)(n.code,{children:"postprocess_tumor_segmentation()"})]}),"\n",(0,r.jsx)(n.p,{children:"This function takes the raw cluster labels and applies a series of intelligent, adaptive filters to produce the final, clean tumor mask."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/EGPC-MRI-Segmentation-Docs/docs/code-reference/function-postprocess",children:"See the detailed breakdown of this function..."})}),"\n",(0,r.jsx)(n.h3,{id:"part-5-visualization-and-saving-functions",children:"Part 5: Visualization and Saving Functions"}),"\n",(0,r.jsxs)(n.p,{children:["These are utility functions (",(0,r.jsx)(n.code,{children:"visualize_results"})," and ",(0,r.jsx)(n.code,{children:"save_tumor_mask"}),") responsible for generating the final visual outputs."]}),"\n",(0,r.jsx)(n.h3,{id:"part-6-main-execution-block",children:"Part 6: Main Execution Block"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:'if __name__ == "__main__"'})," block orchestrates the entire process, calling the functions above in the correct sequence."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);